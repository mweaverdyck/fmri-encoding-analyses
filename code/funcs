#!/bin/bash
# funcs

source ${HOME}/.bash_profile
fsl_v=fsl/5.0.10
python_v=python/3.7.2 #3.6.1 #2.7.13_shared
fmriprep_v=fmriprep/1.4.0 #1.3.2

# subjects to exclude
EXCLUDE_SUBS=( "204" )

# keywords
export ALL='all'
export NEW='new'
export PARC='parc'
export SL='sl'

# Global Project Variables
# directories
export PROJECT_DIR=$data_dir #'/u/project/CCN/cparkins/data/encoding'
export CODE_DIR="${PROJECT_DIR}/code"
export BIDS_DIR="${PROJECT_DIR}/bids"
export DERIVATIVES_DIR="${BIDS_DIR}/derivatives" #"${PROJECT_DIR}/fmriprep_1.4.0/par36" #"${BIDS_DIR}/derivatives" #
export PREP_DIR="${DERIVATIVES_DIR}/prep"
export FIRST_LEVEL_DIR="${DERIVATIVES_DIR}/level1"
export SECOND_LEVEL_DIR="${DERIVATIVES_DIR}/level2"
export RECON_DIR="${PREP_DIR}/freesurfer"
export FMRIPREP_DIR="${PREP_DIR}/fmriprep"
export QA_DIR="${DERIVATIVES_DIR}/qa"

export DERIVS_DIR="${FIRST_LEVEL_DIR}/derivs"
export GLM_DIR="${FIRST_LEVEL_DIR}/glm"
export RSA_DIR="${FIRST_LEVEL_DIR}/rsa"
export MNI_DIR="/u/project/CCN/cparkins/data/atlases/MNI152NLin2009cAsym"
export FREESURFER_HOME="/u/project/CCN/apps/freesurfer/6.0.0"

# analysis steps
export STEPS=( "START" "RECONSTRUCTION" "FMRIPREP" "GLM" "RSA" "GROUP_LEVEL" )
pref="${CODE_DIR}/qsub_"
export SCRIPTS=( "n/a" "${pref}reconall.sh" "${pref}fmriprep.sh" "${pref}glm.sh" "${pref}rsa.sh" "${pref}level2ttestparc_py.sh" )
export DIRS=( "${BIDS_DIR}" "${RECON_DIR}" "${FMRIPREP_DIR}" "${GLM_DIR}" "${RSA_DIR}" "${LEVEL2_TTEST_DIR}" )
export FIRST_LEVEL_STEPS=( 0 1 1 1 1 0 )
export SECOND_LEVEL_STEPS=( 0 0 0 0 0 1 )

# project settings
export SUBID_PREFIX="sub-"
export TASKS=( "friend" "number" )
export NODES=( {0..9} ) # conditions
export N_NODES=10 # number of conditions
export TR=0.75 # tr in seconds
export N_TRS=514 # total number of TRS collected
export N_TRS_DEL=6 # remove this number of TRs from beginning of each run
export N_PARCELS=200 # number of ROIs in parcellation
export N_NETWORKS=7
export MNI_SPACE="MNI152NLin2009cAsym"
export T1_SPACE="T1w"
export MNI_PARCELLATION="${MNI_DIR}/schaefer/tpl-MNI152NLin2009cAsym_res-02_atlas-Schaefer2018_desc-${N_PARCELS}Parcels${N_NETWORKS}Networks_dseg.nii.gz" #2mm_parc.nii.gz"
export MNI_GM_MASK="${MNI_DIR}/anat/2mm_tpm_gm.nii.gz"
export MNI_MASK="${MNI_DIR}/anat/2mm_brainmask.nii.gz"
export MNI_MASK_DIL="${MNI_DIR}/anat/2mm_brainmask_dil-5.nii.gz"
export SPACES=( $T1_SPACE $MNI_SPACE ) #( "T1w" "MNI152NLin2009cAsym" ) # possible spaces
export SPACE=${SPACES[0]}
export STAT="t"
export SL_RADIUS=4
export PROCEDURES_ALL=( ${PARC} ${SL} ) #( "parc" "sl" ), parc = parcellation, sl = searchlight
export PROCEDURE=$SL
if [[ $PROCEDURE == $ALL ]]; then
  export PROCEDURES=( "${PROCEDURES_ALL[@]}" )
else
  export PROCEDURES=( $PROCEDURE )
fi

# filenames
export CFD_FNAME="${CODE_DIR}/CFD_measures.csv"
export ATTS_FNAME="${CODE_DIR}/atts.txt"


NUMID_FORM='^[0-9][0-9][0-9]'
SUBID_FORM="^${SUBID_PREFIX}[0-9][0-9][0-9]"
RE_NUM='^[0-9]+$'
# are you on your local computer (1) or hoffman (0)
if [ ${HOME:0:3} == '/u/' ]; then isLocal=0; else isLocal=1; fi

# how to run steps
alias get_outline='echo "To run full analysis:

    1. # copy behavioral files (from mount)
       . copy_behav ???

    2. # copy dicom files (from server qrsh node)
       qrsh
       . copy_dcm ???

    3. # reformat to BIDS (from mount)
       python organize_as_BIDS.py ???

    4. # first level analyses (from server)
       . run_script full ???
       . run_script reconall fmriprep glm rsaall rsa_sl ???

    5. # Quality Assurance tests (from mount)
       R qa_motion.R
       . run_script mriqc ???
       [python3 qa_rm_nonsteadystates.py] (automatically runs with glm)

    6. # second level analyses (from server)
       qsub qsub_level2sl_py.sh
       qsub qsub_level2ttestparc_py.sh
"'

get_index() {
  val_func=$1; shift
  arr_func=( $@ )
  INDEX=""

  for i in "${!arr_func[@]}"; do
    if [[ "${arr_func[$i]}" = "${val_func}" ]]; then
      INDEX="${i}"
      break
    fi
  done
}
get_step_from_dir() {
  d=$1
  get_index $d ${DIRS[@]}
  STEP=${STEPS[$INDEX]}
}
get_dir_from_step() {
  s=$1
  get_index $s ${STEPS[@]}
  DIR=${DIRS[$INDEX]}
}
get_step_from_script() {
  s=$1
  get_index $s ${SCRIPTS[@]}
  if [[ -z $INDEX ]]; then
    get_index "${CODE_DIR}/$s" ${SCRIPTS[@]}
  fi
  STEP=${STEPS[$INDEX]}
}
get_script_from_step() {
  s=$1
  get_index $s ${STEPS[@]}
  SCRIPT=${SCRIPTS[$INDEX]}
}
get_dir_from_script() {
  s=$1
  get_index $s ${SCRIPTS[@]}
  if [[ -z $INDEX ]]; then
    get_index "${CODE_DIR}/$s" ${SCRIPTS[@]}
  fi
  DIR=${DIRS[$INDEX]}
}
get_script_from_dir() {
  s=$1
  get_index $s ${DIRS[@]}
  SCRIPT=${SCRIPTS[$INDEX]}
}

is_step_second_level() {
  s=$1
  get_index $s ${STEPS[@]}
  IS_LEVEL2=${SECOND_LEVEL_STEPS[$INDEX]}
}

# Standard log output for beginning and end of script
# argument 1: label
# argument 2: logfile
timestamp() {
	datetime="`date "+%Y-%m-%d %H:%M:%S"`"
}
write_log() {
	# 3 arguments needed: label, log file, and text to write to log
	label_arg="$1"
	logfile_arg="$2"
	text_arg="$3"
	# get current date and time
	timestamp
	# get date and add label
	echo "${datetime} ${label_arg}: ${text_arg}" | tee -a "$logfile_arg"
}
log_begin() {
	label_arg="$1"
	logfile_arg="$2"
	write_log "$label_arg" "$logfile_arg" ""
	write_log "$label_arg" "$logfile_arg" "BEGIN --------------------------------"
}
log_end() {
	label_arg="$1"
	logfile_arg="$2"
	write_log "$label_arg" "$logfile_arg" "DONE  --------------------------------"
	write_log "$label_arg" "$logfile_arg" ""
}

test_local() {
	if [[ $isLocal -eq 0 ]]; then
	  echo "ERROR: $1 Must be run on local computer via mount."
		exit 1
	fi
}

test_hoffman() {
	if [[ $isLocal -eq 1 ]]; then
	  echo "ERROR: $1 Must be run while logged into the Hoffman2 cluster."
		exit 1
	fi
}

is_sub() {
	if [[ $1 =~ $NUMID_FORM ]] || [[ $1 =~ $SUBID_FORM ]]; then
    isSub=1
  elif [[ $1 == $ALL ]] || [[ $1 == $NEW ]]; then
    isSub=2
  else
    isSub=0
	fi
}

setup_modules() {
	# call with names of all modules you want to load
	# if it's local, will do nothing
	# if it's not local (i.e., hoffman), will load all arguments as modules
	#local_or_hoffman
	# if on hoffman, then load
	if [ ${isLocal} -eq 0 ]; then
		# add modules to path
		. /u/local/Modules/default/init/modules.sh
		module use /u/project/CCN/apps/modulefiles
		export PATH=/u/project/CCN/cparkins/data/apps/c3d-1.0.0/bin:/u/project/CCN/cparkins/data/apps/libwebp-0.6.1/bin:/u/project/CCN/cparkins/data/apps/node-v8.9.3/bin:~/.local/bin:$PATH
		export PATH=${HOME}/.local/bin:$PATH
		# load each module
		for arg in "$@"; do module load $arg; done
#		export PATH=${HOME}/.local/bin:$PATH
	fi
}

make_n_digits() {
	# makes any number n digits
	n_digits=$1
	arg_number=$2
	if [[ $n_digits =~ $RE_NUM ]] && [[ $arg_number =~ $RE_NUM ]] ; then
		printf -v NUM_PAD "%0${n_digits}d" $arg_number
	else
		echo "ERROR: $n_digits or $arg_number not a number"
	fi
}

function get_subs() {
  d=$1
  sub_dirs=( $(ls -d ${d}/sub-???) )
  DIR_SUBS=()
  for sd in ${sub_dirs[@]}; do
    s=$(basename $sd)
    DIR_SUBS+=("$s")
  done
}

get_all_subs() {
  step_func=$1
  get_index ${step_func} ${STEPS[@]}
  if [[ -z ${INDEX} ]] || [[ ${INDEX} -eq 0 ]]; then
    in_dir_func=${BIDS_DIR}
  else
    pre_index="$(($INDEX - 1))"
    in_dir_func=${DIRS[${pre_index}]}
  fi
  get_subs ${in_dir_func}
}

get_new_subs() {
  step_func=$1
  echo "Finding new subjects for step: ${step_func}"
  get_index ${step_func} ${STEPS[@]}
  if [[ -z ${INDEX} ]]; then
    get_subs ${BIDS_DIR}
  else
    get_all_subs ${step_func}
    all_subs=( ${DIR_SUBS[@]} )
    out_dir_func=${DIRS[$INDEX]}
    get_subs ${out_dir_func}
    completed_subs=( ${DIR_SUBS[@]} )

    for es in ${completed_subs[@]}; do
      all_subs=( "${all_subs[@]/$es}")
    done
    DIR_SUBS=( ${all_subs[@]} )
  fi
}

function convert_sub_args {
	# checks subject argument input and converts it
	# -f format : desired format (subid, numid)
	# [-c]      : convert to desired format
	# [-nosub]  : allows for the possibility of no subjects

	func_label="FUNC_SUBS"

	re_num=$NUMID_FORM
	re_sub=$SUBID_FORM

	f_flag=0
	c_flag=0
	nosub_flag=0
	# intialize subs array
	in_subs=()
	for i in "$@"; do
		# if this element is -c, then convert to requested format
		if [[ $i == "-c" ]]; then
			c_flag=1
			sub_form_next=0
		elif [[ $i == "-nosub" ]]; then
			nosub_flag=1
			sub_form_next=0
		# if this element is -f, then next is subject format
		elif [[ $i == "-f" ]]; then
			f_flag=1
			sub_form_next=1
		# if previous element was -f, then this is the subject format
		elif [[ $sub_form_next -eq 1 ]]; then
			sub_form=$i
			sub_form_next=0
    # # check if subjects=all
    # elif [[ $i == $ALL ]]; then
    #   all_subs=1
    #   all_subs_dir_next=1
    # elif [[ is_sub($i) -eq 1 ]]; then
		# 	# subject
		# 	sub_form_next=0
	  #   in_subs+=("$i")
		else
      #echo "${func_label} WARNING: Unused argument: ${i}"
			# subject
			sub_form_next=0
	    in_subs+=("$i")
		fi
	done

	# ERRORS
	# if -f flag not included
	if [[ f_flag -eq 0 ]]; then
		echo "${func_label} ERROR: Must include -f flag with format argument: 'subid' (sub-###) or 'numid' (###). Exiting..." | tee -a ${log_file}
		exit 1
	fi
	if [[ ${sub_form} == 'subid' ]]; then
		re_sub_form=${re_sub}
		re_non_sub_form=${re_num}
	elif [[ ${sub_form} == 'numid' ]]; then
		re_sub_form=${re_num}
		re_non_sub_form=${re_sub}
	else
		echo "${func_label} ERROR: -f flag argument must be: 'subid' (sub-###) or 'numid' (###). Not: $sub_form. Exiting..." | tee -a ${log_file}
		exit 1
	fi
	# convert excluded subs to correct format
	exclude_subs_format=()
	for es in "${EXCLUDE_SUBS[@]}"; do
		if [[ $es =~ $re_non_sub_form ]]; then
			if [[ $es =~ $re_num ]]; then
				# subid format required:
				es="sub-$es"
			else
				# numid format required:
				es="${es:4}"
			fi
		fi
    exclude_subs_format+=("$es")
	done
  echo "Subjects to exclude: ${exclude_subs_format[@]}"

	out_subs=()
	#if [[ ${in_subs} == $ALL ]] || [[ ${in_subs} == $NEW ]]; then
		 # running all subjects
		 # if next input is directory, find all subject directories in that folder,
		 # otherwise, use bids directory
  if [[ ${in_subs} == $ALL ]] || [[ ${in_subs} == $NEW ]]; then
    step_func=${in_subs[1]}
    if [[ ${in_subs} == $ALL ]]; then
       echo "getting all subjects for step: ${step_func}"
       get_all_subs ${step_func}
    elif [[ ${in_subs} == $NEW ]]; then
       get_new_subs ${step_func}
  	fi
    in_subs=( "${DIR_SUBS[@]}" )
  fi
	# subjects were listed
	for s_func in "${in_subs[@]}"; do

		if [[ $s_func =~ $re_non_sub_form ]] && [[ $c_flag -eq 1 ]]; then
			# wrong format entered and conversion turned on
			if [[ $s_func =~ $re_num ]]; then
				# subid format required:
				s_func="sub-$s_func"
			else
				# numid format required:
				s_func="${s_func:4}"
			fi
		fi
		if [[ $s_func =~ $re_sub_form ]]; then
			# exclude if excluded sub
      es_bool=0
			for es in ${exclude_subs_format[@]}; do
			  if [[ $s_func =~ $es ]] ; then    # use $item as regexp
			    echo "${func_label} Excluding subject: $s_func"
					#s_func=""
          es_bool=1
					break
				fi
			done
      if [[ es_bool -eq 0 ]]; then
			     out_subs+=("$s_func")
      fi
		else
	   		echo "${func_label} ERROR: Subject '$s_func' of wrong format. Skipping..." | tee -a ${log_file}
	   		#exit 1
		fi
	done


	# check if there are any subjects left
	if [[ ${nosub_flag} -ne 1 ]] && [[ ${#in_subs} -eq 0 ]]; then
		echo "${func_label} ERROR: No subjects entered. Exiting..." | tee -a ${log_file}
		exit 1
	fi
	SUBS=("${out_subs[@]}")
}

function get_task_order {
	# get subjects
	convert_sub_args -f numid -c "$1"
	sub=$SUBS
	if [ $((sub%2)) -eq 0 ]; then
	  first_task=${TASKS[0]}
	  second_task=${TASKS[1]}
	else
	  first_task=${TASKS[1]}
	  second_task=${TASKS[0]}
	fi

}

function mk_avg_nii {
	# Args: 1=first image
	# 		2+=other subjects to add with same file name
	owd_func=$(pwd)
	setup_modules $fsl_v
	n_args_subs="$#"
	dir_func=$(dirname $1)
	fname1=$(basename $1)
	cd $dir_func
	convert_sub_args -f numid -c "${@:2}"
	subs=( "${SUBS[@]}" )
	# replaces last instance of sub-### with sub-avg
	AVG_NII=$(echo $fname1 | sed -e 's_func/\('${SUBID_PREFIX}'\).\{3\}/\1avg/g')
	echo "Adding file $fname1"
	cp $fname1 $AVG_NII
	for s_func in "${subs[@]}"; do
		tmp="${fname1}"
		# replaces all instances of sub-### with new sub-###
		tmp=$(echo $tmp | sed -e 's_func/\('${SUBID_PREFIX}'\).\{3\}/\1'${s_func}'/g')
		echo "Adding file $tmp"
		fslmaths ${AVG_NII} -add $tmp ${AVG_NII}
	done
	fslmaths ${AVG_NII} -div ${n_args_subs} ${AVG_NII}
	echo "File ${dir_func}/${AVG_NII} saved."
	cd $owd_func
}

function setup_logfile {
  # create log file name with all subjects
  sub_str=''; for s in "${SUBS[@]}"; do sub_str=$(echo "${sub_str}_${s}"); done
  LOG_FILE="${LOG_OUTPUT}/LOG${sub_str}.log"
  echo "Writing to logfile: ${LOG_FILE}"
}

function begin_script {
  while test $# -gt 0; do
    case "$1" in
      -h|--help)
        echo "$package - attempt to capture frames"
        echo " "
        echo "$package [options] application [arguments]"
        echo " "
        echo "options:"
        echo "-h, --help                show brief help"
        echo "-l, --label=LABEL         specify a label to use"
        echo "-i, --input-dir=DIR       specify a directory to find subjects in"
        echo "-o, --output-dir=DIR      specify a directory to store output in"
        echo "-f, --sub-format=subid    specify what format subject ids should be converted to"
        exit 0
        ;;
      -l)
        shift
        if test $# -gt 0; then
          export LABEL=$1
        else
          echo "no label specified"
          exit 1
        fi
        shift
        ;;
      --label*)
        export LABEL=`echo $1 | sed -e 's/^[^=]*=//g'`
        shift
        ;;
      -i)
        shift
        if test $# -gt 0; then
          export INPUT=$1
        else
          echo "WARNING: no input dir specified"
        fi
        shift
        ;;
      --input-dir*)
        export INPUT=`echo $1 | sed -e 's/^[^=]*=//g'`
        shift
        ;;
      -o)
        shift
        if test $# -gt 0; then
          export OUTPUT=$1
        else
          echo "no output dir specified"
          exit 1
        fi
        shift
        ;;
      --output-dir*)
        export OUTPUT=`echo $1 | sed -e 's/^[^=]*=//g'`
        shift
        ;;
      -f)
        shift
        if test $# -gt 0; then
          export SUBFORMAT=$1
        else
          echo "no subject format specified"
          exit 1
        fi
        shift
        ;;
      --sub-format*)
        export SUBFORMAT=`echo $1 | sed -e 's/^[^=]*=//g'`
        shift
        ;;
      *)
        break
        ;;
    esac
  done
  if [[ $1 == $ALL ]]; then
    a="$@ ${INPUT}"
  else
    a="$@"
  fi
  # get subjects
  convert_sub_args -f ${SUBFORMAT} -c $a
  echo "Running subjects: ${SUBS[@]}"

  # log directory
  LOG_OUTPUT=${OUTPUT}/logs
  # make output directories and parent folders
  mkdir -p ${OUTPUT}
  mkdir -p ${LOG_OUTPUT}
  # create log file
  setup_logfile
  # create log args
  LOG_ARGS="${LABEL} ${LOG_FILE}"
  # log start
  log_begin $LOG_ARGS
  ## log subjects
  #write_log $LOG_ARGS "Analyzing subjects ${SUBS[@]}."
}

### packages to install:
# setup_modules $python_v
# pip3 install --user nipype nistats pandas pybids
# pip3 install --upgrade --user --no-deps statsmodels
# python3 -m pip install --user --no-use-pep517 brainiak
